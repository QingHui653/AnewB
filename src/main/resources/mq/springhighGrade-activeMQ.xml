<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd">
    
    
    <!-- 启用jms注解 -->
    <context:component-scan base-package="newb.c.api.activeMQ"/>   
    <jms:annotation-driven/>
    <bean id="jmsListenerContainerFactory" class="org.springframework.jms.config.DefaultJmsListenerContainerFactory">
        <property name="connectionFactory" ref="connectionFactory"/>
    </bean>
    
    <!-- ActiveMQ 连接工厂 -->
    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
    <!-- 如果连接网络：tcp://ip:61616；未连接网络：tcp://localhost:61616 以及用户名，密码--> 
    <!-- 普通的连接方式 -->
    <!-- <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
        <property name="brokerURL" value="${activemq.url}"/>  
    </bean>  -->
    <!-- 使用activemq 连接池 pool -->
    <bean id="targetConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">  
        <property name="connectionFactory">  
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">  
                <property name="brokerURL" value="${activemq.url}" />  
            </bean>  
        </property>
    </bean> 
       
    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <!-- Spring Caching连接工厂    singleConnectionFactory -->  
    <bean id="connectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">  
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
        <property name="targetConnectionFactory" ref="targetConnectionFactory"/>
        <property name="sessionCacheSize" value="100" />  
    </bean> 
    
    <!-- 好像用配置 会自动转换 消息处理器  Spring默认提供了基于Jdk Serializable的消息处理和MappingJackson2MessageConventer -->
    <!-- <bean id="jmsMessageConverter" class="org.springframework.jms.support.converter.SimpleMessageConverter" /> -->
    
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->  
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
        <property name="connectionFactory" ref="connectionFactory"/>
        <!-- <property name="messageConverter" ref="jmsMessageConverter"/>  --> 
    </bean>  
       
    <!-- 现在消费者 使用的是注解的形式 在   newb.c.api.mq下 -->
    
    <!-- 消息消费者 start  使用jms 配置文件-->

    <!-- <bean id="queueMessageListener" class="newb.c.api.activeMQ.customer.QueueMessageListener"/>  
    <jms:listener-container destination-type="queue" container-type="default" connection-factory="connectionFactory" acknowledge="auto">
        <jms:listener destination="queue" ref="queueMessageListener"/>
    </jms:listener-container>

    <bean id="topicMessageListener" class="newb.c.api.activeMQ.customer.TopicMessageListener"/>
    <jms:listener-container destination-type="topic" container-type="default" connection-factory="connectionFactory" acknowledge="auto">
        <jms:listener destination="topic" ref="topicMessageListener"/>
    </jms:listener-container> -->

    <!-- 消息消费者 end -->
    
    <!--这个是队列目的地-->  
    <!-- <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">  
        <constructor-arg>  
            <value>queue</value>  
        </constructor-arg>  
    </bean> -->
      
    <!-- 消息监听器   使用 bean-->  
    <!-- 消息监听容器 -->  
    <!-- <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
        <property name="connectionFactory" ref="connectionFactory" />  
        <property name="destination" ref="queueDestination" />  
        <property name="messageListener" ref="consumerMessageListener" />  
    </bean> -->
      
</beans>  