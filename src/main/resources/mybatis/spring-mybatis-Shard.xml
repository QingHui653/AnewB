<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context
       	http://www.springframework.org/schema/context/spring-context.xsd
       	http://www.springframework.org/schema/cache 
       	http://www.springframework.org/schema/cache/spring-cache.xsd
       	http://www.dangdang.com/schema/ddframe/rdb 
        http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd
       	">
    
    <!-- 分库分表 独自配置方便切换 -->
       	
    <!-- 扫描目录下的包自动装配 -->  	
    <context:component-scan base-package="newb.c.backend.service" />
	<!-- 由于inline表达式内使用Groovy语法，Groovy语法的变量占位符为`${}`,与Spring的Property占位符冲突。
 +故需要在Spring的配置文件中增加<context:property-placeholder location="classpath:conf/rdb/conf.properties" **ignore-unresolvable="true"**/> -->
	<context:property-placeholder location="classpath*:main/resources/*.properties" />
	
	<!-- 配置数据源 使用的是Druid数据源 -->
	<bean name="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"><!--init-method="init" destroy-method="close" -->
		<property name="driverClassName" value="${jdbc.driver}"/>
		<!-- <property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" /> -->
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="1" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="50" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="1" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="50" />
		<!-- 用来检测有效sql -->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="180000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库   这个别名映射配置信息保存在druid-xxx.jar!/META-INF/druid-filter.properties-->
		<property name="filters" value="mergeStat,log4j" />
	</bean>
	<!-- 主库 -->
	<bean id="ds_0" parent="parentDataSource">
        <property name="url" value="${jdbc.url-1}"/>
        <property name="username" value="${jdbc.username-1}"/>
        <property name="password" value="${jdbc.password-1}"/>
    </bean>
    <!-- 从库 -->
	<bean id="ds_1" parent="parentDataSource">
        <property name="url" value="${jdbc.url-2}"/>
        <property name="username" value="${jdbc.username-2}"/>
        <property name="password" value="${jdbc.password-2}"/>
    </bean>

	<!--<rdb:master-slave-data-source id="rbb_0" master-data-source-ref="ds_0" slave-data-sources-ref="ds_1"/>
	<rdb:master-slave-data-source id="rbb_1" master-data-source-ref="ds_1" slave-data-sources-ref="ds_0"/>-->
	
	<!-- 读写分离配置 -->
	<!-- <rdb:master-slave-data-source id="dbtb" master-data-source-ref="ds_0" slave-data-sources-ref="ds_1"/> -->
	
	<!-- 分库分表规则 -->
	<rdb:strategy id="databaseShardingStrategy" sharding-columns="user_id" algorithm-class="newb.c.sharding.SingleKeyModuloDatabaseShardingAlgorithm"/>
    <rdb:strategy id="tableShardingStrategy" sharding-columns="order_id" algorithm-class="newb.c.sharding.SingleKeyModuloTableShardingAlgorithm"/>
    
    <rdb:data-source id="shardingDataSource">
        <rdb:sharding-rule data-sources="ds_0,ds_1" default-data-source="ds_0"><!--多库  data-sources="ds_0,ds_1"  default-data-source="ds_0"  --> <!-- 读写分离配置 data-sources="dbtb" -->
            <rdb:table-rules>													<!-- database-strategy="databaseShardingStrategy" -->
                <rdb:table-rule logic-table="t_order" actual-tables="t_order_0,t_order_1" table-strategy="tableShardingStrategy" database-strategy="databaseShardingStrategy"/>
            </rdb:table-rules>
            <rdb:binding-table-rules>
                <rdb:binding-table-rule logic-tables="t_order"/>
            </rdb:binding-table-rules>
        </rdb:sharding-rule>
        <rdb:props>
            <prop key="metrics.enable">true</prop>
        </rdb:props>
    </rdb:data-source>
     
	<!-- myBatis 使用 分页插件，通用插件 配置 开始 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="shardingDataSource" /><!-- parentDataSource shardingDataSource -->
		<property name="configLocation" value="classpath:main/resources/mybatis/SqlMapConfig.xml" />
		<!-- <property name="configLocation" value="classpath:mybatis-config.xml"/> -->
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath*:/newb/c/backend/mapping/*.xml" />
		<property name="typeAliasesPackage" value="newb.c.backend.model.basemodel"/>
		<!-- mybatis 分页插件 -->
		<property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            dialect=mysql
                            reasonable=true
                            offsetAsPageNum=true
                            rowBoundsWithCount=true
                            pageSizeZero=true
                            <!-- supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true -->
                        </value>
                    </property>
                </bean>
            </array>
        </property>
	</bean>
	
	<!--  通用mapper 插件 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="newb.c.backend.dao"/>
        <!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
        <!-- <property name="markerInterface" value="newb.c.service.common.MyMapper"/> -->
        <!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口  -->
        <property name="properties">
            <value>
                <!-- mappers=tk.mybatis.mapper.common.Mapper -->
                mappers=newb.c.backend.service.common.MyMapper
            </value>
        </property>
    </bean>
	
	<!-- 未清楚何用 可移除   -->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean> -->
    
    <!-- ehcache 缓存 -->
    <!-- <bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath*:main/resources/mybatis/ehcache.xml" />
    </bean> -->
    <!-- myBatis 使用 分页插件，通用插件 配置  结束-->
    
    <!-- 不使用插件，普通配置mybatis方式  -->
    <!-- 
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="parentDataSource" />
		<property name="mapperLocations" value="classpath:/com/test/mapping/*.xml" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.test.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
     -->
    
    <!-- <aop:aspectj-autoproxy/> -->
    
	<!-- Spring ===事务管理=================== -->
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="shardingDataSource" /><!-- parentDataSource  shardingDataSource-->
	</bean>

	<!-- 开启注解方式支持配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 拦截器方式配置事物 -->
	<!-- 拦截代理对象，为了给业务逻辑对象增加事务处理 -->
	<!-- 
		transactionAttributes属性可以设置事务处理的方式，事务隔离级别，是否只读三个属性，用逗号隔开
		事务隔离级别各数据库系统不完全支持，一般不设置，用默认的即可
		事务处理选项有如下几个：（前面2个常用）
		PROPAGATION_REQUIRED － 需要事务处理。如果当前不存在事务环境，则创建一个
		PROPAGATION_SUPPORTS － 如果当前存在事务环境，则作为其中的一部分。如果不存在，则按非事务方式执行
		PROPAGATION_REQUIRES_NEW － 需要事务处理。并总是开启一个新事务。如果已经存在事务环境，则挂起之
		PROPAGATION_MANDATORY － 执行到指定方法时，必须已经存在事务环境，否则出错
		PROPAGATION_NEVER － 不支持事务操作，如果存在事务环境会出错
		PROPAGATION_NOT_SUPPORTED － 不支持事务操作。如果存在事务，则挂起
	-->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<!--把事务控制在Service层-->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* newb.c.backend.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

</beans>