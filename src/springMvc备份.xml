<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:tx="http://www.springframework.org/schema/tx" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<!-- <mvc:annotation-driven /> -->
	<!--注解说明  
    <context:annotation-config />--> 
    
   <!--  @Controller 声明Action组件
	@Service    声明Service组件    @Service("myMovieLister") 
	@Repository 声明Dao组件
	@Component   泛指组件, 当不好归类时. 
	@RequestMapping("/menu")  请求映射
	@Resource  用于注入，( j2ee提供的 ) 默认按名称装配，@Resource(name="beanName") 
	@Autowired 用于注入，(spring提供的) 默认按类型装配 
	@Transactional( rollbackFor={Exception.class}) 事务管理
	@ResponseBody
	@Scope("prototype")   设定bean的作用域 -->
	<context:component-scan base-package="com.xxl.app.**.control" />
	
	<mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>
	<mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>
	<mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>

	<bean name="handlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >
		<!--<property name="messageConverters">
			<list>
				 <ref bean="byteArray_hmc" />
				<ref bean="string_hmc" /> 
			</list>
		</property>-->
	</bean>
	<!-- <bean id="byteArray_hmc" class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />处理..
	<bean id="string_hmc" class="org.springframework.http.converter.StringHttpMessageConverter" />处理..  -->
	<bean name="handlerMapping" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
		<!-- 只会拦截@RequestMapping的URL
		<property name="interceptors">
		     <list>
		         <bean class="com.mvc.MyInteceptor"></bean>
		     </list>
		 </property> -->
	</bean>	
	<!-- freemarker的配置 -->  
    <bean id="freemarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/view/" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">10</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">#.##</prop>
            </props>
        </property>
    </bean>
    <!-- FreeMarker视图解析 如返回userinfo。。在这里配置后缀名ftl和视图解析器。。 -->  
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />  
        <property name="suffix" value=".html" />  
        <property name="contentType" value="text/html;charset=UTF-8" />
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <property name="exposeSpringMacroHelpers" value="true" />
    </bean>
    
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"
        p:basename="i18n/messages" />

<!-- 	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".html" />
	</bean> -->
	
	<!-- 全局拦截器   会拦截静态资源
	Spring为我们提供了：
	org.springframework.web.servlet.HandlerInterceptor接口，
	org.springframework.web.servlet.handler.HandlerInterceptorAdapter适配器，
	实现这个接口或继承此类，可以非常方便的实现自己的拦截器。
	 
	有以下三个方法：
	 
	Action之前执行:
	 public boolean preHandle(HttpServletRequest request,
	   HttpServletResponse response, Object handler);
	 
	生成视图之前执行
	 public void postHandle(HttpServletRequest request,
	   HttpServletResponse response, Object handler,
	   ModelAndView modelAndView);
	 
	最后执行，可用于释放资源
	 public void afterCompletion(HttpServletRequest request,
	   HttpServletResponse response, Object handler, Exception ex)
	<mvc:interceptors >  
	 <mvc:interceptor>  
	        <mvc:mapping path="/user/*" />  /user/*    
	        <bean class="com.mvc.MyInteceptor"></bean>  
	    </mvc:interceptor>  
	</mvc:interceptors>  
	-->
	
	<!-- 总错误处理
	这里主要的类是SimpleMappingExceptionResolver类，和他的父类AbstractHandlerExceptionResolver类。
	具体可以配置哪些属性，我是通过查看源码知道的。
	你也可以实现HandlerExceptionResolver接口，写一个自己的异常处理程序。
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
		 	<value>/error/error</value> error页面可以通过Exception e = (Exception)request.getAttribute("exception")获得异常信息
		</property>
		<property name="defaultStatusCode">
		 	<value>500</value>
		</property>
		<property name="warnLogCategory">
		 	<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver</value>
		</property>
	</bean>-->
	
	<!-- 对静态资源文件的访问  方案一 （二选一）
	会把"/**" url,注册到SimpleUrlHandlerMapping的urlMap中,把对静态资源的访问由HandlerMapping转到
	org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler处理并返回.
	DefaultServletHttpRequestHandler使用就是各个Servlet容器自己的默认Servlet.
	<mvc:default-servlet-handler/> -->
	
	<!-- 对静态资源文件的访问  方案二 （二选一）/images/**映射到ResourceHttpRequestHandler进行处理，
	location指定静态资源的位置.可以是web application根目录下、jar包里面，这样可以把静态资源压缩到jar包中。
	cache-period 可以使得静态资源进行web cache 
	<mvc:resources mapping="/images/**" location="/images/" cache-period="31556926"/>
	<mvc:resources mapping="/js/**" location="/js/" cache-period="31556926"/>
	<mvc:resources mapping="/css/**" location="/css/" cache-period="31556926"/>-->

</beans>